// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	secretsdto "github.com/IldarGaleev/todo-backend-service/internal/lib/secretsjwt/secretsdto"
	mock "github.com/stretchr/testify/mock"
)

// ISecretProvider is an autogenerated mock type for the ISecretProvider type
type ISecretProvider struct {
	mock.Mock
}

// CreateSecret provides a mock function with given fields: ctx, user
func (_m *ISecretProvider) CreateSecret(ctx context.Context, user secretsdto.User) ([]byte, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecret")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, secretsdto.User) ([]byte, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, secretsdto.User) []byte); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, secretsdto.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecret provides a mock function with given fields: ctx, secret
func (_m *ISecretProvider) DeleteSecret(ctx context.Context, secret []byte) error {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(ctx, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateSecret provides a mock function with given fields: ctx, secret
func (_m *ISecretProvider) ValidateSecret(ctx context.Context, secret []byte) (*secretsdto.User, error) {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSecret")
	}

	var r0 *secretsdto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (*secretsdto.User, error)); ok {
		return rf(ctx, secret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *secretsdto.User); ok {
		r0 = rf(ctx, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsdto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewISecretProvider creates a new instance of ISecretProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISecretProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISecretProvider {
	mock := &ISecretProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
