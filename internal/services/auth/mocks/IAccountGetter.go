// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	storageDTO "github.com/IldarGaleev/todo-backend-service/internal/storage/models"
	mock "github.com/stretchr/testify/mock"
)

// IAccountGetter is an autogenerated mock type for the IAccountGetter type
type IAccountGetter struct {
	mock.Mock
}

// GetAccountByID provides a mock function with given fields: ctx, userID
func (_m *IAccountGetter) GetAccountByID(ctx context.Context, userID uint64) (*storageDTO.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByID")
	}

	var r0 *storageDTO.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*storageDTO.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *storageDTO.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storageDTO.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByUsername provides a mock function with given fields: ctx, username
func (_m *IAccountGetter) GetAccountByUsername(ctx context.Context, username string) (*storageDTO.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByUsername")
	}

	var r0 *storageDTO.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*storageDTO.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *storageDTO.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storageDTO.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAccountGetter creates a new instance of IAccountGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAccountGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAccountGetter {
	mock := &IAccountGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
